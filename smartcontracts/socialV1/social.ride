{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let WSNVERSION = 1
let ZEROBYTE = 0.toBytes()
let opADD = 1
let opREM = 2

let prProtector      = "_protector_"
let prOwner          = "_owner_"
let prUser           = "_user_"
let prSafeUser       = "_safeuser_"
let prTrader         = "_trader_"

let prUniqGate       = "_ug_"
let prCommonGate     = "_cg_"

let prGateOn         = "_gateOn_"
let prStoreOn        = "_storeOn_"

#let prGateUniqOn     = "_gUniqOn_"
#let prGateCommonOn   = "_gCommonOn_"

func to01(v:Boolean) = if v then 1 else 0

func checkOne(key:String, mod:String, pubKey:ByteVector) = {
    match getBinary(this, mod+key) {
        case pk:ByteVector => pk == pubKey
        case _             => false
    }
}

func checkOneExist(key:String, mod:String) = {
    match getBinary(this, mod+key) {
        case pk:ByteVector => pk != ZEROBYTE
        case _             => false
    }
}

# can return position
func check(mod:String, pubKey:ByteVector) = {
    if checkOne("1", mod, pubKey) then 1
    else if checkOne("2", mod, pubKey) then 2
    else if checkOne("3", mod, pubKey) then 3
    else 0
}

func checkAnyExist(mod:String) = {
    if checkOneExist("1", mod) then 1
    else if checkOneExist("2", mod) then 2
    else if checkOneExist("3", mod) then 3
    else 0
}


func getFreePosition(mod:String) = {
    if !checkOneExist("1", mod)
    then 1
    else if !checkOneExist("2", mod)
    then 2
    else if !checkOneExist("3", mod)
    then 3
    else 0
}

# ================================

func strInDB(key:String) = {
    match getBinary(this, key){
        case a:ByteVector => a!=ZEROBYTE
        case _     => false
    }
}

func signedBy(tx:Transaction, key:String, i:Int) = {
    if strInDB(key) then (
        let pubKey = getBinary(this, key)
        let signed = match pubKey {
            case a: ByteVector => sigVerify(tx.bodyBytes, tx.proofs[i], a)
            case _ => false
        }
        signed
    ) else false
}

func checkSignature(tx:Transaction, mod:String, i:Int) = {
    signedBy(tx, mod+"1", i) || signedBy(tx, mod+"2", i) || signedBy(tx, mod+"3", i)
}

# =================================

func remUser(mod:String, pubKey:ByteVector) = {
    let pos = check(mod, pubKey)
    if (pos > 0) then WriteSet([DataEntry(mod+pos.toString(), ZEROBYTE)])
    else throw("no user")
}

func addUser(mod:String, pubKey:ByteVector) = {
    let posCheck = check(mod, pubKey)
    let pos = getFreePosition(mod)

    if posCheck > 0
    then throw("Already exist")
    else
    if (pos > 0) then WriteSet([DataEntry(mod+pos.toString(), pubKey)])
    else throw("no space")
}

func changeUser(mod:String, pubKey:ByteVector, op:Int) = {
    if op == opADD then
        addUser(mod, pubKey)
    else
        remUser(mod, pubKey)
}

##
func getOnlyBoolean(addr:Address, v:String) = {
    match getBoolean(addr, v) {
        case a:Boolean => a
        case _         => false
    }
}

func checkGatePermission(mod: String, pubKey:ByteVector) = {
    let uniqGate = match getString(this, mod + "_ug_" + toBase58String(pubKey)) {
        case gateAddr:String => if (gateAddr != "") then
            {
                getOnlyBoolean(extract(addressFromString(gateAddr)), mod + toBase58String(pubKey))
            } else false
        case _               => false
    }

    # _cg_ - common gate
    let commonGate = if !uniqGate then match getString(this, mod + prCommonGate) {
        case gateAddr:String => if gateAddr != "" then getOnlyBoolean(Address(fromBase58String(gateAddr)), mod+toBase58String(pubKey)) else false
        case _               => false
    } else false

    #let val = getOnlyBoolean(Address(fromBase58String(extract(getString(this, mod + prCommonGate)) )), mod+toBase58String(pubKey))
    #let cg = if commonGate then 1 else if uniqGate then 2 else 0

    #throw("hi debug!" + cg.toString() + val.toString())
    if commonGate then 1 else if uniqGate then 2 else 0
}

func checkStorePermission(mod: String, pubKey:ByteVector) = {check(mod,pubKey)>0}

func checkPermission(mod: String, pubKey:ByteVector) = {
    let allowByGate  = false
    let allowByStore = false

    let gateAddr = true

    let gateOn  = getOnlyBoolean(this, mod + prGateOn)
    let storeOn = getOnlyBoolean(this, mod + prStoreOn)

    let gatePerm  = if gateOn  then checkGatePermission(mod, pubKey)  else 0
    let storePerm = if storeOn then checkStorePermission(mod, pubKey) else false

    if storePerm
    then 1
    else if (gatePerm > 0)
        then gatePerm + 1
        else 0

    # 0 - No perm
    # 1 - store perm
    # 2 - common gate perm
    # 3 - uniq gate perm
}

func checkRoleAndAdd(mod1:String, pubKey1:ByteVector, mod2: String, pubKey2:ByteVector) = {
    if check(mod1,pubKey1)>0 then addUser(mod2, pubKey2) else throw(toBase58String(pubKey1) + "have no permission to add " + mod2)
}

func changeRole(mod:String, pubKey:String, op:String) = {
    if op == "add"
    then addUser(mod, fromBase58String(pubKey))
    else if op == "rem"
    then remUser(mod, fromBase58String(pubKey))
    else throw("Unknown operation. Support only add/rem.")
}


# 0 - pubKey - of new Owner
# 1 - op - "add"/"rem"
# 2 -
#
#
@Callable(i)
func manageOwners(pubKey:String, op:String) = {
    if check(prOwner, i.callerPublicKey) > 0
    then changeRole(prOwner, pubKey, op)
    else throw("no permissions")

}

@Callable(i)
func addUniqGate(mod:String, gateAddr:String, pubKey:String) = {
    if checkPermission(prProtector, i.callerPublicKey) > 0 || checkPermission(prOwner, i.callerPublicKey) > 0
        then WriteSet([DataEntry(mod+prUniqGate+pubKey, gateAddr )])
        else throw("no rights")
}

@Callable(i)
func addCommonGate(mod:String, gateAddr:String) = {
    let chPr  = checkPermission(prProtector, i.callerPublicKey)
    let chOwn = checkPermission(prOwner, i.callerPublicKey)
    if checkPermission(prProtector, i.callerPublicKey) > 0 || checkPermission(prOwner, i.callerPublicKey) > 0
        then WriteSet([DataEntry(mod+prCommonGate, gateAddr )])
        else throw("no rights"+chOwn.toString() + chPr.toString())
}

@Callable(i)
func setStoring(mod:String, store:String) = {
    WriteSet([DataEntry(mod+store, true )])
}

@Callable(i)
func setProtector(pubKey:ByteVector) = checkRoleAndAdd(prOwner, i.callerPublicKey, prProtector, pubKey)

@Callable(i)
func addUserCall(mod:String, pubKeyS:String) = addUser(mod, fromBase58String(pubKeyS))

# @Callable(i)
# func addUserCallTest(mod:String, pubKeyS:String, test:String) = addUser(mod, fromBase58String(pubKeyS))

@Callable(i)
func remUserCall(mod:String, pubKeyS:String) = remUser(mod, fromBase58String(pubKeyS))




@Callable(i)
func initOwnership() = {
    if this == addressFromPublicKey(i.callerPublicKey) then {
        let nLaunch = match getInteger(this, "firstLaunch"){
                case a:Int => a
                case _ => 0
            }

        if (nLaunch == 0) then
            WriteSet([DataEntry("firstLaunch", 1), DataEntry(prOwner+1.toString(), i.callerPublicKey), DataEntry(prOwner+prStoreOn, true)])
        else
            throw("Contract has been already initialized.")
    }
    else
        throw("Only creater can init first owner.")
}

@Callable(i)
func transferCall(addr:String, amount:Int, assetId:String) = {
    let asset = if assetId == ""
    then unit
    else fromBase58String(assetId)

    let permUser = checkPermission(prUser, i.callerPublicKey)
    let permOwn  = checkPermission(prOwner, i.callerPublicKey)
    if (permUser > 0) || (permOwn > 0)
        then TransferSet([ScriptTransfer(Address(fromBase58String(addr)), amount, asset )])
        else throw("No permissions"+permUser.toString() +permOwn.toString())
}


@Callable(i)
func dbgCheckAddrKey(addr:String, key:String) = {
    let val = getOnlyBoolean(Address(fromBase58String(addr)), key)
    throw("val: " + val.toString())
}


@Callable(i)
func dbgCheckOnCommonGateway(mod:String) = {
    let pubKey = i.callerPublicKey
    let commonGate = match getString(this, mod + prCommonGate) {
        case gateAddr:String => if gateAddr != "" then getOnlyBoolean(Address(fromBase58String(gateAddr)), mod+toBase58String(pubKey)) else false
        case _               => false
    }

    let n = commonGate
    throw("res: " + n.toString())
}

@Verifier(tx)
func verify() = {
    match tx {
        case invTx:InvokeScriptTransaction => {
                let protector = checkAnyExist(prProtector)

                let protectorSigned = if protector > 0
                    then checkSignature(invTx, prProtector, 0)
                    else true

                let ownerSigner = if check(prOwner, tx.senderPublicKey) > 0
                    then sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
                    else false


                #if invTx.function == "addUserCall" || invTx.function == "remUserCall" then {
                #    if protector>0 then protectorSigned && ownerSigner else ownerSigner
                #}
                #else if invTx.function == "transfer" then {
                #    check(prUser, tx.senderPublicKey) > 0
                #}
                #else false
                true
            }

        case scriptTx:SetScriptTransaction => {
            # 0 - proof of protector
            # 1 - proof of owner
            let protector = checkAnyExist(prProtector)

            let protectorSigned = if protector > 0
                then checkSignature(scriptTx, prProtector, 0)
                else true

            let ownerSigner = if check(prOwner, tx.senderPublicKey) > 0
                then sigVerify(tx.bodyBytes, tx.proofs[ to01(protector>0) ], tx.senderPublicKey)
                else false

            ownerSigner && protectorSigned
        }

        case _ => this == addressFromPublicKey(tx.senderPublicKey)
    }
}
