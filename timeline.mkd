# raw timeline

## important tags:
Question

## 11 March 2019 - 17 March 2019

### 11 March
1. repo <https://github.com/j0k/data2waves>
2. get WAVES on TESTNET <http://testnet.wavesexplorer.com/faucet>
3. multisignature trx <http://testnet.wavesexplorer.com/tx/2RmduSXxCia9F8M8Ls1C3nBA968dB1XwHP5uoTPpTxhE>
4. pywave tools <https://github.com/PyWaves/pywavestools>
5. setScript function <https://github.com/PyWaves/PyWaves/blob/master/address.py>
6. waves transactions <https://wavesplatform.github.io/waves-transactions/globals.html#setscript>
7. Waves IDE <https://testnet.wavesplatform.com/>
8. Script transaction <https://docs.wavesplatform.com/en/waves-client/advanced_features/script_transaction.html>
9. Waves Smart Contract example <https://www.youtube.com/watch?v=OIQoheOYJw8>

  5:30 change JSON


### 12 March
1. repo <https://github.com/j0k/waves_understanding>
2. #tofix <https://blog.wavesplatform.com/the-hitchhikers-guide-to-waves-smart-contracts-part-2-44621fd5a007>
   check lot of links like:
   + https://wavesplatform.com/files/docs/white_paper_waves_smart_contracts.pdf
   + https://docs.wavesplatform.com/en/technical-details/waves-contracts-language-description/language-description.html
   + https://docs.wavesplatform.com/en/technical-details/waves-contracts-language-description/standard-library.html
3. Waves Discord Communication channels <https://discordapp.com/invite/cnFmDyA>
4. #Question Can I save dataTrx using sponsorship tokens inside waves?
5. Waves console https://demo.wavesplatform.com/example/console
6. #tofix link to [jsconsole](https://github.com/remy/jsconsole) here <https://demo.wavesplatform.com/example/console>
7. Waves Smart Contract :: console example - <https://www.youtube.com/watch?v=sOZuE9Ebfko>
8. Decompile RIDE code <https://nodes.wavesnodes.com/api-docs/index.html#!/utils/decompile_1>
  + [note on decompile endpoint](https://github.com/wavesplatform/Waves/releases) with "script decompiler API endpoint available at /utils/script/decompile"
  + <https://nodes.wavesnodes.com/utils/script/decompile>
  + code: AQQAAAAFcEtleTABAAAAIHvdERXb58cxFQRsfxdCoFv5h4/76PUTAp/52BoHuv50BAAAAAVwS2V5MQEAAAAgZFVpkmX9Jd05Yji7z9DP3h5AXa3oS9Qhlifbk/iOUkkEAAAAC3BLZXkwU2lnbmVkAwkAAfQAAAADCAUAAAACdHgAAAAJYm9keUJ5dGVzCQABkQAAAAIIBQAAAAJ0eAAAAAZwcm9vZnMAAAAAAAAAAAAFAAAABXBLZXkwAAAAAAAAAAABAAAAAAAAAAAABAAAAAtwS2V5MVNpZ25lZAMJAAH0AAAAAwgFAAAAAnR4AAAACWJvZHlCeXRlcwkAAZEAAAACCAUAAAACdHgAAAAGcHJvb2ZzAAAAAAAAAAABBQAAAAVwS2V5MQAAAAAAAAAAAQAAAAAAAAAAAAkAAGcAAAACCQAAZAAAAAIFAAAAC3BLZXkwU2lnbmVkBQAAAAtwS2V5MVNpZ25lZAAAAAAAAAAAAhE4uF8=
  + return
  ```
  {
  "script": "{
     let pKey0 = base58'9LWfF7zhuDC7prC7xGGusygrzDFe6JsuEs3Mp22zBQ4B';
    {
        let pKey1 =   base58'7kfJvEMLxPxn7je8GtUtjQqGonaNAmESWVvpLy6VLS2t';
        {
            let pKey0Signed =
                {
                    if (
                        sigVerify(tx.bodyBytes, getElement(tx.proofs, 0), pKey0)
                    )
                    then
                        1
                    else
                        0
                };
            {
                let pKey1Signed =
                    {
                        if (
                            sigVerify(tx.bodyBytes, getElement(tx.proofs, 1), pKey1)
                        )
                        then
                            1
                        else
                            0
                    };
                ((pKey0Signed + pKey1Signed) >= 2)
            }
        }
    }
}"  
```
9. Fine Code: <https://medium.com/@ikardanov/create-your-first-crypto-trading-bot-390e3f9037e1>

### 13 March
1. script and transaction <https://docs.wavesplatform.com/en/waves-client/advanced_features/script_transaction.html>
2. arch v0.1 <https://github.com/j0k/data2waves/blob/master/docs/arch_v0.1.mkd>


### 18 March
1. waves-transaction 2 webpack bundle.js
2. npm install -g ts-node
3. npm install
4. npm run build
5. webpack.conf.json

### 20 March
1. https://github.com/wavesplatform/waves-c/
2. https://github.com/wavesplatform/waves-c/blob/master/src/crypto/waves_crypto.c
3. we have libs for encrypt-decrypt inside waves-signatures (find it) and waves-keeper (AES)
4. https://github.com/wavesplatform/waves-signature-generator/
5. https://github.com/bachan/coda/blob/master/coda/cache.tcc
6. https://github.com/chainify/waveskeeper/commit/e739f3187eef00954178021f7f0e68734ddddc4c

### 25 March
1. free text
2. http://book.pythontips.com/en/latest/python_c_extension.html
3. RSA_example.py https://gist.github.com/syedrakib/241b68f5aeaefd7ef8e2
4. https://stackoverflow.com/questions/11016078/is-it-possible-to-create-a-function-dynamically-during-runtime-in-c
5. https://docs.wavesplatform.com/en/waves-environment/waves-protocol/data-structures.html#section-884d9804999fc47a3c2694e49ad2536a
6. https://github.com/wavesplatform/waves-c/blob/master/src/crypto/waves_crypto.c

### 12 April Smartcontracts
1. Smart-contact orig docs - https://docs.wavesplatform.com/en/smart-contracts/video-tutorials-and-articles.html
2. Waves IDE - https://ide.wavesplatform.com/
3. https://docs.wavesplatform.com/en/smart-contracts/ride4dapps/overview.html
4. (?all) function with types: https://cdn.rawgit.com/wavesplatform/waves-documentation/master/en/doc.html
5. internal https://wavesplatform.atlassian.net/wiki/spaces/MAIN/pages/823197754/Smart+Contract
6. internal https://wavesplatform.atlassian.net/wiki/spaces/MAIN/pages/1153892391/RIDE+4+DAPPS
7. Some RIDE examples: https://github.com/wavesplatform/ride-examples


### 14 April
1. https://www.youtube.com/watch?v=k7gK7FgUFiU
```

@Callable(i)

@Verifier(txx)

Script and Data associated with account

no automatic triggers

state machine
1:22

lse ScriptResult(
                    WriteSet([
                        DataEntry(xxxStartupFund, newAmount)
                        ]),
                    TransferSet([ScriptTransfer(i.caller, amount, unit)])
                )
```

### 15 April

1. https://docs.wavesplatform.com/en/smart-contracts/ride-language/standard-library.html
2. тратиться ли вычисления если false
3.

```
@Callable(i)
func addOwner(addrAddOwner: String) = {    
    let myAddr = toBase58String(this)
    let addrCallerOwner = toBase58String(i.caller.bytes) + "_owner"
    let keyQueryOwner = addrAddOwner + "_owner"

    let ownerExist = match getInteger(this, keyQueryOwner){
        case a:Int => 1
        case _ => 0
    }

    if (myAddr == addrCallerOwner) and (!ownerExist)
        WriteSet([DataEntry(keyQueryOwner, 1)])    
}

```

```
{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

```

```
let myAddr = toBase58String(this)

this.bytes.toBase58String()
```


```

@Callable(i)
func addOwner(addrAddOwner: String) = {    
    let myAddr = this.bytes.toBase58String()
    let addrCallerOwner = toBase58String(i.caller.bytes) + "_owner"
    let keyQueryOwner = addrAddOwner + "_owner"

    let ownerExist = match getInteger(this, keyQueryOwner){
        case a:Int => 1
        case _ => 0
    }

    if (myAddr == addrCallerOwner) then (
        WriteSet([DataEntry(keyQueryOwner, 1)])
    ) else (true)
}
```


```
@Callable(i)
func addOwner(addrAddOwner: String) = {    
    let myAddr = this.bytes.toBase58String()
    let addrCallerOwner = toBase58String(i.caller.bytes) + "_owner"
    let keyQueryOwner = addrAddOwner + "_owner"

    let ownerExist = match getInteger(this, keyQueryOwner){
        case a:Int => 1
        case _ => 0
    }

    if (myAddr == addrCallerOwner) then (
        WriteSet([DataEntry(keyQueryOwner, 1)])
    ) else throw("Nothing to do")
}

seed = patrol random prepare script diet scissors demise pole ancient shrimp desert glimpse
```

need to do verify
```
@Callable(i)
func addOwner(addrAddOwner: String) = {    
    let myAddr = this.bytes.toBase58String()
    let addrCallerOwner = toBase58String(i.caller.bytes) + "_owner"
    let keyQueryOwner = addrAddOwner + "_owner"

    let ownerExist = match getInteger(this, keyQueryOwner){
        case a:Int => 1
        case _ => 0
    }

    if (myAddr == addrCallerOwner) then (
        WriteSet([DataEntry(keyQueryOwner, 1)])
    ) else throw("Nothing to do")
}

@Verifier(txx)
func verify() = {
    true
}
```

```
deploy(compile(env.file()))
```

```
prefixOwner
not
prefix_owner
```

see https://wavesexplorer.com/testnet/address/3MrJcvDviHvAXJrEEi45Gpj88VgduRVem8V

4. https://docs.wavesplatform.com/en/waves-api-and-sdk/waves-node-rest-api/example-transactions.html

```
@Callable(i)
func transfer(amount: Int, toAddr: String) = {
    let addrCaller = toBase58String(i.caller.bytes)

    if (amount < 0)
        then throw("Can't withdraw negative amount")
    else (
        if (fWithMod(prefixOwner,addrCaller) || fWithMod(prefixUser,addrCaller)) then
            TransferSet([ScriptTransfer(Address(fromBase58String(toAddr)), amount, unit)])
        else throw("You don't have privileges to make transfers.")
    )
}
```

```100000000```

```broadcast(invokeScript({dappAddress: address(env.accounts[1]), call:{function:"transfer",args:[{type:"integer", value:100000000},{type:"string", value: address(env.accounts[0])}]}, payment: {}))```

  broadcast(invokeScript({dappAddress: address(env.accounts[1]), call:{function:"deposit",args:[]}, payment: [{amount: 100000000, asset:null }]}))

broadcast(
  invokeScript({dappAddress: address(env.accounts[1]),
    call:{function:"transfer", args:[{type:"integer", value:100000000},{type:"string", value: address(env.accounts[0])}], payment: []}}))

```

# 16 April

1. delete script - https://www.youtube.com/watch?v=gBgLjg6nrvA&amp=&feature=youtu.be
const deleteScript = SetScript({script: null, senderPublicKey:publicKey()})

```
does there is a difference between:
this.bytes.toBase58String()
toBase58String(this.bytes)
```

replace

`func addU(mod:String, addr:String) {`
with
`func addU(mod:String, addr:String) = {`

2. web client testnet https://testnet.wavesplatform.com/
3. web client testnet issue tokens https://testnet.wavesplatform.com/tokens
4. decompile scripts https://testnode2.wavesnodes.com/api-docs/index.html#!/utils/decompile_1


5.
```
Issuer         : 3Mq8aY2AjUCxYJuR8nGCzBkusL94HM4wVb3
ID             : 34UsbiY6CK67wXKvGkTPZnMdyvk43bnn7VS7CyXk1efU
Name           : TEST SMART
Total amount   : 1,000,000
Decimal points : 3
Type           : Reissuable
Issue date     : 16.04.2019 16:16
```

## 17 April
1. https://wavesplatform.github.io/waves-transactions/globals.html#broadcast
2. about datatransactions https://wavesplatform.github.io/waves-transactions/globals.html#data
3. first tests
```
const wid0Addr = address(wid0Seed)
const wid0PubKey = publicKey(wid0Seed)

const wid1Addr = address(wid1Seed)
const wid1PubKey = publicKey(wid1Seed)

const wid2Addr = address(wid2Seed)
const wid2PubKey = publicKey(wid2Seed)

const newAccAddr = address(newAccSeed)
const newAccPubKey = publicKey(newAccSeed)

describe('Wallet test suite', () => {
    it('deploys dapp script', async function(){
        const ttx = setScript({ script: compile(file("smartAcc.ride")), fee:2000000}, wid0Seed)
        await broadcast(ttx)
        await waitForTx(ttx.id)
    })

    it('deploys dapp script from right newAcc', async function(){
        const ttx = setScript({
            script: compile(file("smartAcc.ride")),
            senderPublicKey:wid0PubKey, fee:2000000}, newAccSeed)
        await broadcast(ttx)
        await waitForTx(ttx.id)
    })

    it ('wid0 делегирует право тратить wid1', async function(){

    })

    it ('wid0 делегирует право тратить wid2', async function(){

    })

    it ('wid1 тратит деньги wid0 в пользу третье стороны', async function(){

    })

    it ('wid0 отнимает право тратить у wid1', async function(){

    })

    it ('wid0 делегирует право тратить wid3', async function(){

    })

    it ('wid2 тратит деньги wid0 в пользу третьей стороны', async function(){

    })
})
```

4. about Waves blockchain
https://github.com/wavesplatform/Waves/blob/master/lang/shared/src/main/scala/com/wavesplatform/lang/v1/compiler/Terms.scala

5. working account
```
{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let accCreator = this.bytes.toBase58String()   
# let accPub     = publicKey(this)

# map [pk]        -> index
func keyInDB(key:String) = {
    match getInteger(this, key){
        case a:Int => a>0
        case _     => false
    }
}

func strInDB(key:String) = {
    match getString(this, key){
        case a:String => a!=""
        case _     => false
    }    
}

func strInDBVal(key:String, val:String) = {
    match getString(this, key){
        case a:String => a == val
        case _     => false
    }    
}

func add(pubkey:String) = {
    if !strInDB("1") then WriteSet([DataEntry("1", pubkey)])
    else if !strInDB("2") then WriteSet([DataEntry("2", pubkey)])
    else if !strInDB("3") then WriteSet([DataEntry("3", pubkey)])
    else if !strInDB("4") then WriteSet([DataEntry("4", pubkey)])
    else if !strInDB("5") then WriteSet([DataEntry("5", pubkey)])
    else if !strInDB("6") then WriteSet([DataEntry("6", pubkey)])
    else if !strInDB("7") then WriteSet([DataEntry("7", pubkey)])
    else throw("Can't add more then 7 pubkeys")
}

func rem(pubkey:String) = {
    if strInDBVal("1", pubkey) then WriteSet([DataEntry("1", "")])
    else if strInDBVal("2", pubkey) then WriteSet([DataEntry("2", "")])
    else if strInDBVal("3", pubkey) then WriteSet([DataEntry("3", "")])
    else if strInDBVal("4", pubkey) then WriteSet([DataEntry("4", "")])
    else if strInDBVal("5", pubkey) then WriteSet([DataEntry("5", "")])
    else if strInDBVal("6", pubkey) then WriteSet([DataEntry("6", "")])
    else if strInDBVal("7", pubkey) then WriteSet([DataEntry("7", "")])
    else throw("Can't add more then 7 pubkeys")
}

func signedBy(tx:TransferTransaction, key:String) = {
    if strInDB(key) then (
        let pubKey = getString(this, key)
        let signed = match pubKey {
            case a: String => sigVerify(tx.bodyBytes, tx.proofs[0], a.toBytes())
            case _ => false
        }
        signed
    ) else false    
}

func checkSignature(tx:TransferTransaction) = {
    signedBy(tx, "1") || signedBy(tx, "2") || signedBy(tx, "3") || signedBy(tx, "4") || signedBy(tx, "5") || signedBy(tx, "6") || signedBy(tx, "7")
}

func inDB(addr:String, mod:String) = {
    match getInteger(this, mod+addr){
        case a:Int => a>0
        case _     => false
    }
}

func addU3(callerA:Address, mod:String, addr:String) = {
    let contrCreator = this.bytes.toBase58String()   
    let caller = callerA.bytes.toBase58String()

    if (inDB(caller, mod) || caller == contrCreator)
    then (
        let data = DataEntry(mod+addr, 1)
        WriteSet([data])
    )
    else throw("Can't do that.")
}


@Callable(i)
func addU(mod:String, addr:String) = addU3(i.caller, mod,addr)

@Verifier(tx)
func verify() = {

    let creator    = this.bytes.toBase58String()   
    let callerAddr = tx.sender.bytes.toBase58String()    
    let callerPub  = tx.senderPublicKey

    # let owner0Pub = base58'D3UfSPqNwqLcVehemqb1yTku8gMFDrZgFGXVgjz8nDeG'
    # let owner0Pub = base58'BL2PoAH3sGvKbtqHRfodYLXR3Gw1qBsU4dcksDHJgbec'

    # let owner0Signed  = if(sigVerify(tx.bodyBytes, tx.proofs[0], owner0Pub  )) then 1 else 0    
    # let caller0Signed  = if(sigVerify(tx.bodyBytes, tx.proofs[0], callerPub  )) then 1 else 0    

    match(tx) {
        case transferTx: TransferTransaction =>
            checkSignature(transferTx)            
        case scriptTx: SetScriptTransaction =>         
            callerAddr == creator
        case dataTx: DataTransaction =>         
            callerAddr == creator

        case _ => false
    }
}
```

## 18 April
1. some words about compiler https://github.com/wavesplatform/Waves/blob/master/lang/shared/src/main/scala/com/wavesplatform/lang/v1/compiler/Terms.scala
2. result smartcontract
```
{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let accCreator = this.bytes.toBase58String()   
# let accPub     = publicKey(this)

# map [pk]        -> index
func keyInDB(key:String) = {
    match getInteger(this, key){
        case a:Int => a>0
        case _     => false
    }
}

func strInDB(key:String) = {
    match getString(this, key){
        case a:String => a!=""
        case _     => false
    }    
}

func strInDBVal(key:String, val:String) = {
    match getString(this, key){
        case a:String => a == val
        case _     => false
    }    
}

func add(mod:String, pubkey:String) = {
    if !strInDB(mod+"1") then WriteSet([DataEntry(mod+"1", pubkey)])
    else if !strInDB(mod+"2") then WriteSet([DataEntry(mod+"2", pubkey)])
    else if !strInDB(mod+"3") then WriteSet([DataEntry(mod+"3", pubkey)])
    else if !strInDB(mod+"4") then WriteSet([DataEntry(mod+"4", pubkey)])
    else if !strInDB(mod+"5") then WriteSet([DataEntry(mod+"5", pubkey)])
    else if !strInDB(mod+"6") then WriteSet([DataEntry(mod+"6", pubkey)])
    else if !strInDB(mod+"7") then WriteSet([DataEntry(mod+"7", pubkey)])
    else throw("Can't add more then 7 pubkeys under mod:"+mod)
}

func rem(mod:String, pubkey:String) = {
    if strInDBVal(mod+"1", pubkey) then WriteSet([DataEntry(mod+"1", "")])
    else if strInDBVal(mod+"2", pubkey) then WriteSet([DataEntry(mod+"2", "")])
    else if strInDBVal(mod+"3", pubkey) then WriteSet([DataEntry(mod+"3", "")])
    else if strInDBVal(mod+"4", pubkey) then WriteSet([DataEntry(mod+"4", "")])
    else if strInDBVal(mod+"5", pubkey) then WriteSet([DataEntry(mod+"5", "")])
    else if strInDBVal(mod+"6", pubkey) then WriteSet([DataEntry(mod+"6", "")])
    else if strInDBVal(mod+"7", pubkey) then WriteSet([DataEntry(mod+"7", "")])
    else throw("Can't add more then 7 pubkeys under mod:"+mod)
}

func signedBy(tx:Transaction, key:String) = {
    if strInDB(key) then (
        let pubKey = getString(this, key)
        let signed = match pubKey {
            case a: String => sigVerify(tx.bodyBytes, tx.proofs[0], a.toBytes())
            case _ => false
        }
        signed
    ) else false    
}

func checkSignature(tx:Transaction, mod:String) = {
    signedBy(tx, mod+"1") || signedBy(tx, mod+"2") || signedBy(tx, mod+"3") || signedBy(tx, mod+"4") || signedBy(tx, mod+"5") || signedBy(tx, mod+"6") || signedBy(tx, mod+"7")
}

func inDB(addr:String, mod:String) = {
    match getInteger(this, mod+addr){
        case a:Int => a>0
        case _     => false
    }
}

func addU3(callerA:Address, mod:String, addr:String, val:String) = {
    let contractCreator = this.bytes.toBase58String()   
    let caller = callerA.bytes.toBase58String()

    if (inDB(caller, mod) || caller == contractCreator)
    then (
        let data = DataEntry(mod+addr, val)
        WriteSet([data])
    )
    else throw("Can't do that.")
}


@Callable(i)
func addU(mod:String, addr:String, val:String) = addU3(i.caller, mod, addr, val)

@Verifier(tx)
func verify() = {
    let creator    = this.bytes.toBase58String()   
    let callerAddr = tx.sender.bytes.toBase58String()    
    let callerPub  = tx.senderPublicKey

    # let owner0Pub = base58'D3UfSPqNwqLcVehemqb1yTku8gMFDrZgFGXVgjz8nDeG'
    # let owner0Pub = base58'BL2PoAH3sGvKbtqHRfodYLXR3Gw1qBsU4dcksDHJgbec'

    # let owner0Signed  = if(sigVerify(tx.bodyBytes, tx.proofs[0], owner0Pub  )) then 1 else 0    
    # let caller0Signed  = if(sigVerify(tx.bodyBytes, tx.proofs[0], callerPub  )) then 1 else 0    

    match(tx) {
        case transferTx: TransferTransaction =>
            checkSignature(transferTx, "transfer_")            
        case scriptTx: SetScriptTransaction =>         
            callerAddr == creator || checkSignature(scriptTx, "owner_")            
        case dataTx: DataTransaction =>         
            callerAddr == creator || checkSignature(dataTx, "owner_")            

        case _ => false
    }
}
```

## 23 April

1. https://wavesplatform.github.io/waves-transactions/interfaces/iburnparams.html
2. https://github.com/wavesplatform/waves-transactions
3. https://github.com/wavesplatform/waves-transactions/blob/master/usage/invoke-script.ts
4. https://docs.wavesplatform.com/en/ride/built-in-functions.html#Int

## 24 April

1. let userState = getInteger(extract(WhitelistAddr), toBase58String(tx.sender.bytes));
2. работа со строками
3.
```
let key = toBase58String(tx.sender.bytes) + "_WAVES";
let minAmount = getInteger(extract(WhitelistAddr), key)
if isDefined(minAmount) then
```
4. https://docs.wavesplatform.com/en/ride/effective-ride-examples.html

## 25 April

1. смартконтракт порождает а) WriteSet, б) TransferSet и ничего более.

a) WriteSet - изменение своего стейта с помощью изменения своих данных
b) TransferSet - изменение балансов в формате [ScriptTransfer(addr, amount, unit)] -

т.е. аккаунт не может делать классические аттачменты к транзакциям , но может в себя дописывать данные [key -> value] по этим аттачментам

2. https://wavesplatform.com/files/docs/white_paper_waves_smart_contracts.pdf
3. about ByteVector
```
let list = [0, 1, 2]
let listBytes = toBytes(list[0]) + toBytes(list[1]) + toBytes(list[2])
```

4. arch:


listen every 1 sec for transaction:
keep dict [block => set(transactions)]
write 2 kafka all new transaction

two channels:
1. one for confirmed
2. one for unconfirmed
3. are forks are possible? right

## 26 April

1. https://docs.wavesplatform.com/en/waves-full-node/api-limitations-of-the-pool-of-public-nodes.html
2. https://docs.wavesplatform.com/en/waves-oracles/what-is-a-data-oracle.html
3. https://testnodes.wavesnodes.com/api-docs/index.html#!/transactions/info_2

## 13 May

1. https://github.com/wavesplatform/Waves/blob/master/node/src/main/scala/com/wavesplatform/account/AddressOrAlias.scala
2. there is no big logic to use handler of InvokeScript inside @Verifier


## 14 May
1. No bit-logic operations
2. smart assets can accept expressions for inside computations
3. be very careful with smartcontract writing & deploying
